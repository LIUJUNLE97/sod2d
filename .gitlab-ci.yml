## This coonfigures the pipelines for SOD2D, still under coonstruction!

## Define and configure the OS to use for the jobs
default:
    #image: ubuntu:20.04
    #image: lucasbsc21387/sod2d-image:0.1.1
    image: lucasbsc21387/archlinux-hpc:1.0.0

## List of stages for jobs, and their order of execution
stages:
    - drivercheck
    - build
    - test

## before launching the buuilds, get thhe submodules
before_script:
    - git submodule update --init --recursive

## Driver check stage: check the driver is loading properly
drivercheck:
    stage: drivercheck
    script:
        - nvidia-smi -L | grep "Quadro P4200"

## Confgure the build jobs

# build-GNU-Debug job configuration
build-GNU-Debug:
    stage: build
    script:
        # Load necessary modules
        - module load hdf5
        - ml list
        # Add a build folder and enter it
        - mkdir build && cd build
        # Run CMake
        - cmake -DDEBUG_MODE=ON -DTOOL_MESHPART=ON ..
        # Run make
        - make -j 4

# build-GNU-Release job configuration
build-GNU-Release:
    stage: build
    script:
        # Load necessary modules
        - module load hdf5
        - ml list
        # Add a build folder and enter it
        - mkdir build_gnu_release && cd build_gnu_release
        # Run CMake
        - cmake -DDEBUG_MODE=OFF -DTOOL_MESHPART=ON ..
        # Run make
        - make -j 4
        - echo "Compile complete."
    # Build folder is a dependency for the test jobs
    artifacts:
        paths:
            - build_gnu_release

# build-OneAPI-Release job configuration
# TODO: re-enable once alll is working
build-OneAPI-Release:
    stage: build
    script:
        # Load necessary modules
        - module load compiler/2025.0.0
        - module load mkl/2025.0
        - module load mpi/2021.14
        - module load hdf5
        - ml list
        # Set the proper I_MPI compilers
        - export I_MPI_CC=icx
        - export I_MPI_CXX=icpx
        - export I_MPI_F77=ifx
        - export I_MPI_F90=ifx
        - export I_MPI_FC=ifx
        # Add a build folder and enter it
        - mkdir build && cd build
        # Run CMake
        - cmake -DDEBUG_MODE=OFF -DTOOL_MESHPART=ON ..
        # Run make
        - make -j 4

build-OneAPI-Debug:
    stage: build
    script:
        # Load necessary modules
        - module load compiler/2025.0.0
        - module load mkl/2025.0 
        - module load mpi/2021.14
        - module load hdf5
        - ml list
        # Set the proper I_MPI compilers
        - export I_MPI_CC=icx
        - export I_MPI_CXX=icpx
        - export I_MPI_F77=ifx
        - export I_MPI_F90=ifx
        - export I_MPI_FC=ifx
        # Add a build folder and enter it
        - mkdir build && cd build
        # Run CMake
        - cmake -DDEBUG_MODE=ON -DTOOL_MESHPART=ON ..
        # Run make
        - make -j 4

# build-NVHPC-CPU-Release job configuration
build-NVHPC-CPU-Release:
    stage: build
    script:
        # Load necessary modules
        - module load nvhpc-hpcx-cuda12/24.11 hdf5
        - ml list
        # Add a build folder and enter it
        - mkdir build && cd build
        # Run CMake
        - cmake -DDEBUG_MODE=OFF -DTOOL_MESHPART=ON ..
        # Run make
        - make -j 4

# build-NVHPC-GPU-Release job configuration
build-NVHPC-GPU-Release:
    stage: build
    script:
        # Load necessary modules
        - module load nvhpc-hpcx-cuda12/24.11 hdf5
        - ml list
        # Add a build folder and enter it
        - mkdir build_nvhpc_gpu && cd build_nvhpc_gpu
        # Run CMake
        - nvidia-smi --query-gpu=compute_cap --format=csv
        - cmake -DUSE_GPU=ON -DUSE_MEM_MANAGED=OFF -DDEBUG_MODE=OFF ..
        # Run make
        - make -j 4
    artifacts:
        paths:
            - build_nvhpc_gpu

## Test stage: run the TGV cases located in Tests/TGV_Compressible

# CPU-IMEX configuration using GCC-Release build
test-TGVComp-CPU-IMEX:
    stage: test
    script:
        # Load necessary modules
        - module load hdf5
        - ml list
        # Check that the build folder exists
        - ls build_gnu_release
        - ldd build_gnu_release/src/app_sod2d/sod2d
        # Enter the testing folder
        - cd Tests/TGV_Compressible/CPU/IMEX
        - ls -lt -h
        - ls -lt -h ../../
        # Run the test using the generated executable in build-GNU-Release
        - cp ../../../../build_gnu_release/src/app_sod2d/sod2d .
        - mpirun -np 4 --allow-run-as-root ./sod2d TGVCompSolver.json
        # install numpy and run the python test
        - pacman -S python-numpy
        - python testcheck.py
    # Add the dependencies
    dependencies:
        - build-GNU-Release

# GPU-IMEX configuration using NVHPC-GPU-Release build
test-TGVComp-GPU-IMEX:
    stage: test
    script:
        # Load necessary modules
        - module load nvhpc-hpcx-cuda12/24.11 hdf5
        - ml list
        # Check that the build folder exists
        - ls build_nvhpc_gpu
        - ldd build_nvhpc_gpu/src/app_sod2d/sod2d
        # Enter the testing folder
        - cd Tests/TGV_Compressible/GPU/IMEX
        # Run the test using the generated executable in build-GNU-Release
        - cp ../../../../build_nvhpc_gpu/src/app_sod2d/sod2d .
        - mpirun -np 1 --allow-run-as-root ./sod2d TGVCompSolver.json
        # install numpy and run the python test
        - pacman -S python-numpy
        - python testcheck.py
    # Add the dependencies
    dependencies:
        - build-NVHPC-GPU-Release
